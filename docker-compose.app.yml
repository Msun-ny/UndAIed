services:
  frontend:
    build: ./FE
    container_name: FE
    expose:
      - "5173"
    volumes:
      - ./FE:/app
      - /app/node_modules
    networks:
      - app_network
    restart: always
    environment:
      - TZ=Asia/Seoul

  backend:
    build: ./BE/undaid
    container_name: BE
    expose:
      - "8080"
      - "9090"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/undaied?useSSL=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SOCKETIO_SERVER_HOSTNAME: "0.0.0.0"
      SOCKETIO_SERVER_PORT: 9090
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      TZ: Asia/Seoul
    networks:
      - app_network
    restart: always

  ai:
    build: ./AI
    container_name: AI
    expose:
      - "8000"
    volumes:
      - ./AI:/app
    environment:
      - PYTHONPATH=/app
      - TZ=Asia/Seoul
    networks:
      - app_network
    restart: always
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network
    command: 
      - --character-set-server=utf8mb4 
      - --collation-server=utf8mb4_unicode_ci
      - --default-time-zone=+09:00
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: always
    environment:
      - TZ=Asia/Seoul
      - VM_OVERCOMMIT_MEMORY=1
    user: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
  redis_data:

networks:
  app_network:
    external: true